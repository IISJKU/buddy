<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

function buddy_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'at_description' && $view_mode == 'full') {
    $node_lang = $entity->get('field_at_description_language')->getString();
    $user_lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if (!empty($node_lang) && !empty($user_lang) && $node_lang !== $user_lang) {
      // Fetch AT entry of AT description
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'at_entry')
        ->condition('field_at_descriptions', $entity->id(), 'IN');
      $results = $query->execute();
      if (empty($results)) {
        return;
      }
      // Find AT description in user's language
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'at_description')
        ->condition('field_at_entry', array_shift($results))
        ->condition('field_at_description_language', $user_lang)
        ->condition('status', 1);
      $results = $query->execute();
      if (!empty($results)) {
        $messenger = \Drupal::messenger();
        $languages = \Drupal::service('language_manager')->getStandardLanguageList();
        $messenger->addMessage(
          t('This entry is available in @language: @at_link.',
            [ '@language' => $languages[$user_lang][0],
              '@at_link' => Link::createFromRoute(
                t('click here to see it'),
                'buddy.description_view', ['description' => array_shift($results)])
                ->toString(),]),
          $messenger::TYPE_STATUS,
          FALSE);
      }
    }
  }
}


/**
 * Implements hook_user_login().
 */
function buddy_user_login($account) {
  $referer = \Drupal::request()->headers->get('referer');

  //social_auth_google_login_destination in session->data->_sf2_attributs
  $current_route = Drupal::routeMatch()->getRouteName();
  $request = Drupal::request();
  if ($request->getRequestFormat() !== 'html') {
    return;
  }
  $destination = $request->query->get('destination');
  if ($destination && $destination != '/user/login') {
    return;
  }

  $middleware = \Drupal::service('http_middleware.buddy');

  //Accessing the site in maintenance mode.
  if (\Drupal::state()
      ->get('system.maintenance_mode') && !$account->hasPermission('access site in maintenance mode')) {
    // The site is in maintenance mode and the user is not allowed in.
    // Step out and let Drupal handle it.
    $homeResponse = new RedirectResponse(URL::fromUserInput('/')->toString());
    $middleware->setRedirectResponse($homeResponse);

  }

  $tempstore = \Drupal::service('tempstore.private')->get('buddy_module');
  $some_data = $tempstore->get('login');

  $tempstore1 = \Drupal::service('tempstore.private')->get('mymodule');
  $var = $tempstore1->get('var_name');
  if (!in_array($current_route, ['user.reset', 'user.reset.login'])) {

    if( !in_array("at_moderator", $account->getRoles()) && !in_array("at_provider", $account->getRoles()) &&  !in_array("administrator", $account->getRoles())){

      $user = \Drupal::currentUser();
      $user_profileID = \Drupal::entityQuery('node')
        ->condition('type', 'user_profile')
        ->condition('uid', $user->id(), '=')
        ->condition('field_user_profile_finished', true, '=')
        ->execute();
      if (count($user_profileID) == 0) {
        $redirectResponse = new RedirectResponse(URL::fromRoute('buddy.user_profile')->toString());
        $middleware->setRedirectResponse($redirectResponse);
      } else {
        $redirectResponse = new RedirectResponse(URL::fromRoute('buddy.user_at_library')->toString());
        $middleware->setRedirectResponse($redirectResponse);
      }
    }

    if(in_array("at_moderator",$account->getRoles())){
      $redirectResponse = new RedirectResponse(URL::fromRoute('buddy.at_moderator_at_entry_all')->toString());
      $middleware->setRedirectResponse($redirectResponse);
    }
    return;
  }

}

function buddy_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if($entity->getEntityTypeId() == "user") {
    $account = \Drupal::currentUser();
    if (!in_array("at_moderator", $account->getRoles()) && !in_array("at_provider", $account->getRoles()) && !in_array("administrator", $account->getRoles())){
      $markup= "<h2>".t("Preferences")."</h2>";
      $markup.= Link::createFromRoute(t('Adjust my preferences'),'buddy.user_profile',[],  ['attributes' => ['class' => 'btn btn-primary overview-button']])->toString()->getGeneratedLink();
      $markup.= "<hr>";

      $build['buddy_user_view_markup'] = array(
        '#markup' => $markup,
      );
    }
  }
}

/**
 * Implement hook_local_tasks_alter
 * Remove local tasks from user login/registration page
 * @param array $local_tasks
 */
function buddy_local_tasks_alter(&$local_tasks) {
  unset($local_tasks['user.login']);
  unset($local_tasks['user.register']);
  unset($local_tasks['user.pass']);
}

/**
 * Implements hook_cron().
 */
function buddy_cron()
{
  $route = 'api/v1/rating/collection';
  $config = \Drupal::config('buddy.settings');
  $mode = $config->get('mode');
  if ($mode == 'prod') {
    $post_url = $config->get('rating_service_prod');
    $username = $config->get('rating_service_account');
    $pwd = $config->get('rating_service_pwd');
  } else {
    $post_url = $config->get('rating_service_dev');
    $username = $config->get('rating_service_dev_account');
    $pwd = $config->get('rating_service_dev_pwd');
  }

  // TODO post request

}
